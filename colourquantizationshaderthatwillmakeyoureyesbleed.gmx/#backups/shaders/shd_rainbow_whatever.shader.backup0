// 2020-05-05 05:25:04
// Wacky rainbow domain wrap stuff
// MMXX ZIK
attribute vec3 in_Position;                  // (x,y,z)
attribute vec4 in_Colour;                    // (r,g,b,a)
attribute vec2 in_TextureCoord;              // (u,v)

varying vec2 v_vTexcoord;
varying vec4 v_vColour;

void main()
{
    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);
    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;
    
    v_vColour = in_Colour;
    v_vTexcoord = in_TextureCoord;
}

//######################_==_YOYO_SHADER_MARKER_==_######################@~ // Wacky rainbow domain wrap stuff
// MMXX ZIK
varying vec2 v_vTexcoord;
varying vec4 v_vColour;

uniform float uTime;

// hsv to rgb
// https://gist.github.com/yiwenl/745bfea7f04c456e0101
vec3 hsv2rgb (vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void main()
{
    vec2 uv = fract(v_vTexcoord * 4.0);
    vec2 uvcycle = v_vTexcoord * 6.28318531;
    uv.y += cos(uvcycle.x + uTime) * 0.2;
    uv.x += sin(uvcycle.y + uTime) * 2.0;
    uv.y += fract(uTime);
    
    vec4 colour = vec4(hsv2rgb(vec3(v_vTexcoord.x, 0.2, 1.0)), 1.0);
    colour.rgb *= (0.5 - abs(v_vTexcoord.x - 0.5)) + 0.5;
    
    vec4 ogcol = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );
    vec4 distortcol = v_vColour * colour * texture2D( gm_BaseTexture, fract(uv) );
    gl_FragColor = distortcol; // vec4(ogcol.r, distortcol.g, (ogcol.b + distortcol.b) * 0.5, 1.0);
}

